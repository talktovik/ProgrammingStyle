Criteria for Analysis
# Number of Comparisons 
	(the number of comparisions actually tells us the complexity the algorithm should have.)
# Number of swaps 
	(In order to maintain the order, how many swaps could be required.)
# Adaptive 
	(Like whatif we are trying to put elements in incresing order but they are already in 
	increasing order.)
# Stable 
	( if the sorting algorithm is preserving the order of duplicate elements in the sorted list then that 
algorithmn is called stable. Such stable algorithms are used in databases. )
# Extra Memory 
	(some requires extra memory in order to do sorting.)

Some Sorting Algorithms::

Bubble sort             |	{
Insertion Sort		|	{ complexity O(n^2)
Selection sort 		|	{
			|
Heap Sort 	  	|	{
Merge Sort 		| 	{			These are Comprasion based sorts
Quick Sort 		|	{complexity O(nlogn)
Tree Sort		|	{Complexity of shell sort is O(n^3/2)
Shell Sort 		|

Count sort		|
Bucket/Bin Sort 	| Index Based Sort complexity of these three is O(n)
Radix sort		| But they consume more space
_________________________________________________________________________________________________________
Bubble sort 

So consider we have "m" elements so passes required : m-1
Pass is something when you traverse the entire array and sort one element. 
Comparisons required = "O(n^2)"
Swaps Required = "O(n^2)"
+---------------------------------------------------------------------------------------------------+
| so Bubble sort have a feature if you do 1 pass then you get the largest element of the array,for  |  
| example if you need K biggest element in the array then run bubble sort for 3 times.              |
+---------------------------------------------------------------------------------------------------+  
Adaptive ?  ->  You can make it adaptive by doing some modifications.
well look the code we have written in the MydataStrc._andAlgorithms! Just feel and this is simple.

So minimum time for bubble sort = O(n){
in case of already sorted list, then also one pass would be there.
}
and Maximum time required is O(n^2)

Stable ? -> Yeah it is stable! because think like we are only doing swapping if a[j] > a[j+1] and we are 
not writing a[j] >= a[j+1] so it will take care of already sorted things !

_________________________________________________________________________________________________________
Insertion Sort:
It is based on the card game sorting.
Here we have the concept of Shifting. Shift the element untill you found the right place.The Soul of insertion sort is
based on consider we have a slready sorted list/array and we want to insert an element in that sorted array/list and 
also have to put that element in that sorted position.
Lets thing the array is aleady sorted and the last element is bigger than the element so what we can do is shift the 
element into and make room for the new element and compare it with next element with the array.
[This all comes under the insert logic which Insertion sort uses]

Okay so lets say we have an array like [8,5,7,3,2] and we want to perform insertion sort on this. SO what we can do 
is we can choose the first element like [8 | 5 7 3 2 ] and consider this list like two list the list on the left side 
is sorted and the list on the other side is unsorted. we just have to take one element from this unsorted list and insert
it into sorted list.
The insertion sort is basically uses {swap and comparision}. 
Now Facts about Insertion sort:
First: It is having the time complexity of O(n^2).
__________________________________________________________________________________________________________
Selection Sort:

























